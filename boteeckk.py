import os
import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8410470590:AAF_kCe9xBdtdggZ6Jz1I9UNPaLT0PnhKPY"
ADMIN_ID = 509466119

PRICE_SINGLE = 8   # —Ü–µ–Ω–∞ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
PRICE_DOUBLE = 9   # —Ü–µ–Ω–∞ –∑–∞ –ª–∏—Å—Ç (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è)

USERS_FILE = "users.txt"


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===
def save_user(user_id):
    with open(USERS_FILE, "a+") as f:
        f.seek(0)
        users = f.read().splitlines()
        if str(user_id) not in users:
            f.write(f"{user_id}\n")


def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return [int(line.strip()) for line in f if line.strip()]
    except FileNotFoundError:
        return []


# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
WAITING_FILE, SELECTING_MODE, ENTERING_RANGES, ENTERING_TOPICS, SELECTING_PRINT_TYPE, CONFIRMING = range(6)


# === –ü–ê–†–°–ò–ù–ì –î–ò–ê–ü–ê–ó–û–ù–û–í ===
def parse_ranges(text):
    ranges = []
    total_pages = 0
    text = text.replace(" ", "")
    parts = text.split(",")
    for part in parts:
        if "-" in part:
            a, b = part.split("-")
            a, b = int(a), int(b)
            if a > b:
                a, b = b, a
            ranges.append(f"{a}-{b}")
            total_pages += b - a + 1
        else:
            page = int(part)
            ranges.append(f"{page}")
            total_pages += 1
    return ranges, total_pages


# === –•–ï–ù–î–õ–ï–†–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    save_user(user_id)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–±–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏, –∞ –î–∞—à–µ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –∏ –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å—Å—èüíÖ\n\n"
        "„Ä∞Ô∏è–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∫–µ @thiod\n\n"
        "–ê —Å–µ–π—á–∞—Å –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª–∏–∫ —Å—é–¥–∞ ‚§µÔ∏è"
    )
    return WAITING_FILE


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª üìé")
        return WAITING_FILE

    context.user_data["file_id"] = document.file_id
    context.user_data["file_name"] = document.file_name

    keyboard = [["–°—Ç—Ä–∞–Ω–∏—Ü—ã", "–ì–ª–∞–≤—ã/—Ç–µ–º—ã"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è—Ç–æ! ‚úÖ\n–ß—Ç–æ —É–∫–∞–∂–µ—à—å?",
        reply_markup=reply_markup
    )
    return SELECTING_MODE


async def mode_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip().lower()
    if choice == "—Å—Ç—Ä–∞–Ω–∏—Ü—ã":
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-5, 7, 10-12)")
        return ENTERING_RANGES
    elif choice == "–≥–ª–∞–≤—ã":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–∞–∫–∏–µ –≥–ª–∞–≤—ã/—Ç–µ–º—ã –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å")
        return ENTERING_TOPICS
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π: –°—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ì–ª–∞–≤—ã")
        return SELECTING_MODE


async def ranges_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    try:
        ranges, total_pages = parse_ranges(user_input)
    except Exception:
        await update.message.reply_text("–ì–¥–µ-—Ç–æ –æ–ø—à–∏–ø–∫–∞( (–ø—Ä–∏–º–µ—Ä—ã: 1-5, 7, 10-12")
        return ENTERING_RANGES

    context.user_data["ranges"] = ranges
    context.user_data["total_pages"] = total_pages

    await update.message.reply_text(
        "–û –∫–∞–∫! –î–∏–∞–ø–∞–∑–æ–Ω—ã:\n" + "\n".join([f"‚Ä¢ {r}" for r in ranges])
    )

    keyboard = [["–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è", "–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:", reply_markup=reply_markup)
    return SELECTING_PRINT_TYPE


async def enter_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = update.message.text.strip()
    context.user_data["topics"] = topics

    keyboard = [["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        f"–¢—ã —É–∫–∞–∑–∞–ª(–∞): {topics}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=reply_markup
    )
    return CONFIRMING


async def print_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text.lower()
    if user_choice not in ["–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è", "–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–æ—á–∫–æ–π –≤–Ω–∏–∑—É")
        return SELECTING_PRINT_TYPE

    context.user_data["print_type"] = user_choice

    num_pages = context.user_data["total_pages"]
    if user_choice == "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è":
        sheets = num_pages
        total_cost = sheets * PRICE_SINGLE
    else:
        sheets = (num_pages + 1) // 2
        total_cost = sheets * PRICE_DOUBLE

    context.user_data["sheets"] = sheets
    context.user_data["total_cost"] = total_cost

    details = (
        f"–§–∞–π–ª: {context.user_data['file_name']}\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω—ã: {', '.join(context.user_data['ranges'])}\n"
        f"–¢–∏–ø –ø–µ—á–∞—Ç–∏: {context.user_data['print_type']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {num_pages}\n"
        f"–ò—Ç–æ–≥–æ: {total_cost}‚ÇΩ"
    )

    keyboard = [["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(f"–ò—Ç–æ–≥:\n\n{details}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=reply_markup)
    return CONFIRMING


async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip().lower()
    file_id = context.user_data.get("file_id")
    file_name = context.user_data.get("file_name")

    if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in choice:
        if "ranges" in context.user_data:  # –∑–∞–∫–∞–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            print_type = context.user_data.get("print_type")
            num_pages = context.user_data.get("total_pages")
            total_cost = context.user_data.get("total_cost")
            ranges = context.user_data.get("ranges")

            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=file_id,
                filename=file_name,
                caption=(
                    f"üìÑ –°—Ç—É—á–∏—Ç—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–µ–Ω–µ–∂–∫–∞!\n"
                    f"–î–∏–∞–ø–∞–∑–æ–Ω—ã: {', '.join(ranges)}\n"
                    f"–¢–∏–ø –ø–µ—á–∞—Ç–∏: {print_type}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {num_pages}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}‚ÇΩ\n"
                    f"–û—Ç @{update.effective_user.username or update.effective_user.id}"
                )
            )

        elif "topics" in context.user_data:  # –∑–∞–∫–∞–∑ –ø–æ –≥–ª–∞–≤–∞–º
            topics = context.user_data.get("topics")

            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=file_id,
                filename=file_name,
                caption=(
                    f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                    f"–¢–µ–º—ã/–≥–ª–∞–≤—ã: {topics}\n"
                    f"–û—Ç @{update.effective_user.username or update.effective_user.id}"
                )
            )

        await update.message.reply_text(
            "–ü–æ–Ω—è—Ç–æ –∏ –ø—Ä–∏–Ω—è—Ç–æ! ‚úÖ\n–ê–¥–º–∏–Ω–∫–∞ —Å–æ–æ–±—â–∏—Ç —Å—Ç–∞—Ç—É—Å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text("–ë–ª–∏–Ω( –ë—É–¥—É –∂–¥–∞—Ç—å —Å–Ω–æ–≤–∞", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–∞–ª—è –æ—Ç–º–µ–Ω–∞!!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# === –†–ê–°–°–´–õ–ö–ê ===
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏(( üö´")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /post —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    text = " ".join(context.args)
    users = load_users()
    sent, failed = 0, 0

    for uid in users:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
            sent += 1
        except Exception:
            failed += 1

    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")


# === MAIN ===
def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FILE: [MessageHandler(filters.Document.ALL, handle_file)],
            SELECTING_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, mode_selected)],
            ENTERING_RANGES: [MessageHandler(filters.TEXT & ~filters.COMMAND, ranges_received)],
            ENTERING_TOPICS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_topics)],
            SELECTING_PRINT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, print_type_selected)],
            CONFIRMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("post", post))

    print("–ú–ê–®–ò–ù–ê –ó–ê–ü–£–©–ï–ù–ê...")
    app.run_polling()


if __name__ == "__main__":
    main()
